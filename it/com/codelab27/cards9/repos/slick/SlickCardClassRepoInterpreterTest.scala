package com.codelab27.cards9.repos.slick

import java.net.URL

import com.codelab27.cards9.models.cards.CardClass
import org.scalatest.{BeforeAndAfterAll, Matchers, WordSpec}
import org.scalatest.concurrent.ScalaFutures._

import scala.concurrent.Await
import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.duration._

class SlickCardClassRepoInterpreterTest extends WordSpec with Matchers with BeforeAndAfterAll {

  private implicit val patienceConfig = PatienceConfig(10.seconds, 50.millis)

  private val testingUrl = "jdbc:h2:mem:play;MODE=PostgreSQL;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=FALSE"

  private val db = H2CardClassRepoInterpreter.db(testingUrl)

  override def beforeAll(): Unit = {
    Await.result(db.run(H2CardClassRepoInterpreter.createTable), 1.second)
  }

  override def afterAll(): Unit = {
    Await.result(db.shutdown, 1.second)
  }

  "A card class" when {

    "stored" should {

      "be retrieved with an autogenerated id" in {

        val cardClass = CardClass(
          CardClass.Name("chocobo"),
          new URL("http://vignette1.wikia.nocookie.net/finalfantasy/images/f/fc/CT_Chocobo.png/revision/latest?cb=20151127205658"),
          None)

        val attemptStore = for {
          cardClassId <- H2CardClassRepoInterpreter.storeCardClass(cardClass)
        } yield {
          cardClassId
        }

        whenReady(db.run(attemptStore)) { result =>
          result.value.isValidInt
        }
      }

    }

  }

}
